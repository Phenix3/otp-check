require('dotenv').config();
const express = require('express');
const makeWASocket = require('baileysjs').default;
const { DisconnectReason, useMultiFileAuthState } = require('baileysjs');
const { Boom } = require('@hapi/boom');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const path = require('path');
const QRCode = require('qrcode');

const app = express();
const PORT = process.env.PORT || 4000;

// Middleware d'authentification par cl√© API
const authenticateApiKey = (req, res, next) => {
    const apiKey = req.headers['x-api-key'];
    
    if (!apiKey || apiKey !== process.env.API_KEY) {
        return res.status(401).json({
            success: false,
            error: 'Cl√© API invalide ou manquante'
        });
    }
    
    next();
};

app.use(express.json());
// Routes prot√©g√©es (avec authentification)
app.use(authenticateApiKey);

let sock = null;
let qrString = null;

// Fichier pour stocker l'√©tat de connexion
const CONNECTION_STATE_FILE = './connection_state.json';
const AUTH_FOLDER = './auth_info_baileys';

// Classe pour g√©rer l'√©tat de connexion
class ConnectionStateManager {
    constructor() {
        this.state = {
            isConnected: false,
            lastConnected: null,
            phoneNumber: null,
            sessionId: null,
            deviceId: null
        };
        this.loadState();
    }

    loadState() {
        try {
            if (fs.existsSync(CONNECTION_STATE_FILE)) {
                const data = fs.readFileSync(CONNECTION_STATE_FILE, 'utf8');
                this.state = { ...this.state, ...JSON.parse(data) };
                console.log('üìÇ √âtat de connexion charg√©:', this.state);
            }
        } catch (error) {
            console.error('‚ùå Erreur lors du chargement de l\'√©tat:', error);
        }
    }

    saveState() {
        try {
            fs.writeFileSync(CONNECTION_STATE_FILE, JSON.stringify(this.state, null, 2));
            console.log('üíæ √âtat de connexion sauvegard√©');
        } catch (error) {
            console.error('‚ùå Erreur lors de la sauvegarde de l\'√©tat:', error);
        }
    }

    setConnected(phoneNumber = null, deviceId = null) {
        this.state.isConnected = true;
        this.state.lastConnected = new Date().toISOString();
        this.state.phoneNumber = phoneNumber;
        this.state.deviceId = deviceId;
        this.state.sessionId = this.generateSessionId();
        this.saveState();
    }

    setDisconnected() {
        this.state.isConnected = false;
        this.state.sessionId = null;
        this.saveState();
    }

    isAuthValid() {
        // V√©rifier si le dossier d'authentification existe et contient les fichiers n√©cessaires
        if (!fs.existsSync(AUTH_FOLDER)) {
            return false;
        }

        const requiredFiles = ['creds.json'];
        return requiredFiles.every(file => 
            fs.existsSync(path.join(AUTH_FOLDER, file))
        );
    }

    getConnectionInfo() {
        return {
            ...this.state,
            hasValidAuth: this.isAuthValid(),
            authFolderExists: fs.existsSync(AUTH_FOLDER)
        };
    }

    generateSessionId() {
        return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    clear() {
        this.state = {
            isConnected: false,
            lastConnected: null,
            phoneNumber: null,
            sessionId: null,
            deviceId: null
        };
        this.saveState();
    }
}

const connectionManager = new ConnectionStateManager();

// Fonction pour g√©n√©rer un code OTP al√©atoire
function generateOTP(length = 6) {
    const digits = '0123456789';
    let otp = '';
    for (let i = 0; i < length; i++) {
        otp += digits[Math.floor(Math.random() * digits.length)];
    }
    return otp;
}

// Fonction pour formater le num√©ro de t√©l√©phone
function formatPhoneNumber(phoneNumber) {
    let cleaned = phoneNumber.replace(/[^\d+]/g, '');
    
    if (cleaned.startsWith('+')) {
        cleaned = cleaned.substring(1);
    }
    
    return `${cleaned}@s.whatsapp.net`;
}

// Fonction pour v√©rifier l'√©tat de la connexion actuelle
async function checkCurrentConnection() {
    if (!sock) return false;
    
    try {
        // Essayer d'obtenir des informations sur l'utilisateur connect√©
        const user = sock.user;
        if (user && user.id) {
            connectionManager.setConnected(user.id, user.id);
            return true;
        }
    } catch (error) {
        console.log('‚ö†Ô∏è Connexion non valide:', error.message);
    }
    
    return false;
}

// Fonction pour initialiser la connexion WhatsApp
async function connectToWhatsApp() {
    try {
        console.log('üîÑ Initialisation de la connexion WhatsApp...');
        
        // V√©rifier si on a d√©j√† des credentials valides
        const hasValidAuth = connectionManager.isAuthValid();
        console.log(`üîê Authentification existante: ${hasValidAuth ? 'OUI' : 'NON'}`);
        
        // Utiliser l'authentification multi-fichiers
        const { state, saveCreds } = await useMultiFileAuthState(AUTH_FOLDER);
        
        sock = makeWASocket({
            auth: state,
            printQRInTerminal: false,
            logger: require('pino')({ level: 'silent' }),
            browser: ['WhatsApp OTP Server', 'Chrome', '1.0.0'],
            syncFullHistory: false,
            markOnlineOnConnect: true
        });

        // G√©rer les mises √† jour de connexion
        sock.ev.on('connection.update', async (update) => {
            const { connection, lastDisconnect, qr } = update;
            
            if (qr) {
                qrString = qr;
                console.log('üì± QR Code g√©n√©r√© - disponible via /qr');
            }
            
            if (connection === 'close') {
                const statusCode = (lastDisconnect?.error)?.output?.statusCode;
                console.log('üî¥ Connexion ferm√©e √† cause de:', lastDisconnect?.error);

                // If 401 Unauthorized, clear auth and force new QR
                if (statusCode === 401) {
                    console.log('üßπ Authentification invalide, suppression des fichiers d\'auth...');
                    if (fs.existsSync(AUTH_FOLDER)) {
                        fs.rmSync(AUTH_FOLDER, { recursive: true, force: true });
                    }
                    connectionManager.clear();
                    qrString = null;
                    // Wait a bit before reconnecting to allow QR regeneration
                    setTimeout(connectToWhatsApp, 2000);
                } else {
                    connectionManager.setDisconnected();
                    qrString = null;
                    const shouldReconnect = statusCode !== DisconnectReason.loggedOut;
                    if (shouldReconnect) {
                        console.log('üîÑ Reconnexion dans 3 secondes...');
                        setTimeout(connectToWhatsApp, 3000);
                    } else {
                        console.log('üö´ D√©connexion d√©finitive - QR requis');
                    }
                }
            } else if (connection === 'open') {
                console.log('‚úÖ Connexion WhatsApp √©tablie');
                qrString = null;
                
                // Obtenir les informations de l'utilisateur connect√©
                if (sock.user) {
                    connectionManager.setConnected(sock.user.id, sock.user.id);
                    console.log(`üë§ Connect√© en tant que: ${sock.user.id}`);
                } else {
                    connectionManager.setConnected();
                }
            } else if (connection === 'connecting') {
                console.log('üîÑ Connexion en cours...');
            }
        });

        // Sauvegarder les credentials quand ils sont mis √† jour
        sock.ev.on('creds.update', saveCreds);

        // G√©rer les messages re√ßus (optionnel - pour debug)
        sock.ev.on('messages.upsert', async (m) => {
            const message = m.messages[0];
            if (!message.key.fromMe && message.message) {
                console.log('üì® Message re√ßu de:', message.key.remoteJid);
            }
        });

        sock.ev.on('error', (err) => {
            console.error('Socket error:', err);
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de la connexion:', error);
        connectionManager.setDisconnected();
        setTimeout(connectToWhatsApp, 5000);
    }
}

// Helper to wrap async route handlers
const asyncHandler = fn => (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch(next);
};

// Routes publiques (sans authentification)
app.get('/qr-view', async (req, res) => {
    if (!qrString) {
        const connectionInfo = connectionManager.getConnectionInfo();
        return res.send(`
            <h2>QR code non disponible</h2>
            <p>√âtat de connexion: ${connectionInfo.isConnected ? 'Connect√©' : 'D√©connect√©'}</p>
            <p>Authentification valide: ${connectionInfo.hasValidAuth ? 'Oui' : 'Non'}</p>
            <button onclick="location.reload()">Rafra√Æchir</button>
        `);
    }
    
    const qrImageUrl = await QRCode.toDataURL(qrString);
    res.send(`
        <h2>Scannez ce QR code avec WhatsApp</h2>
        <img src="${qrImageUrl}" alt="QR Code" />
        <p>Ouvrez WhatsApp &gt; Appareils connect√©s &gt; Scanner un QR code</p>
        <button onclick="location.reload()">Rafra√Æchir</button>
    `);
});

app.get('/status', async (req, res) => {
    const connectionInfo = connectionManager.getConnectionInfo();
    let realTimeStatus = false;
    if (sock) {
        realTimeStatus = await checkCurrentConnection();
    }
    res.json({
        connected: connectionInfo.isConnected && realTimeStatus,
        hasQR: !!qrString,
        lastConnected: connectionInfo.lastConnected,
        phoneNumber: connectionInfo.phoneNumber,
        sessionId: connectionInfo.sessionId,
        hasValidAuth: connectionInfo.hasValidAuth,
        authFolderExists: connectionInfo.authFolderExists,
        socketActive: !!sock,
        realTimeConnected: realTimeStatus,
        timestamp: new Date().toISOString()
    });
});


// Route pour obtenir des informations d√©taill√©es sur l'authentification
app.get('/auth-info', async (req, res) => {
    const connectionInfo = connectionManager.getConnectionInfo();
    
    // V√©rifier l'√©tat r√©el de la connexion si le socket existe
    let realTimeStatus = false;
    if (sock) {
        realTimeStatus = await checkCurrentConnection();
    }
    
    res.json({
        connected: connectionInfo.isConnected && realTimeStatus,
        hasQR: !!qrString,
        lastConnected: connectionInfo.lastConnected,
        phoneNumber: connectionInfo.phoneNumber,
        sessionId: connectionInfo.sessionId,
        hasValidAuth: connectionInfo.hasValidAuth,
        authFolderExists: connectionInfo.authFolderExists,
        socketActive: !!sock,
        realTimeConnected: realTimeStatus,
        timestamp: new Date().toISOString()
    });
});

// Route pour obtenir des informations d√©taill√©es sur l'authentification
app.get('/auth-info', (req, res) => {
    const connectionInfo = connectionManager.getConnectionInfo();
    let authFiles = [];
    
    if (fs.existsSync(AUTH_FOLDER)) {
        try {
            authFiles = fs.readdirSync(AUTH_FOLDER);
        } catch (error) {
            console.error('Erreur lecture dossier auth:', error);
        }
    }
    
    res.json({
        hasValidAuth: connectionInfo.hasValidAuth,
        authFolderExists: connectionInfo.authFolderExists,
        authFiles: authFiles,
        lastConnected: connectionInfo.lastConnected,
        phoneNumber: connectionInfo.phoneNumber,
        canAutoConnect: connectionInfo.hasValidAuth && authFiles.includes('creds.json')
    });
});

// Route pour obtenir le QR code si disponible
app.get('/qr', (req, res) => {
    if (qrString) {
        res.json({
            qr: qrString,
            message: 'Scannez ce QR code avec WhatsApp'
        });
    } else if (connectionManager.getConnectionInfo().isConnected) {
        res.json({
            message: 'WhatsApp est d√©j√† connect√©',
            connected: true
        });
    } else {
        res.status(404).json({
            error: 'QR code non disponible',
            hasValidAuth: connectionManager.isAuthValid()
        });
    }
});

// Route pour envoyer un code OTP
app.post('/send-otp', async (req, res) => {
    try {
        const { phoneNumber, message, otpLength } = req.body;

        // Validation des param√®tres
        if (!phoneNumber) {
            return res.status(400).json({
                success: false,
                error: 'Le num√©ro de t√©l√©phone est requis'
            });
        }

        // V√©rifier l'√©tat de la connexion
        const isReallyConnected = await checkCurrentConnection();
        if (!isReallyConnected || !sock) {
            return res.status(503).json({
                success: false,
                error: 'WhatsApp n\'est pas connect√©. Veuillez scanner le QR code.',
                hasValidAuth: connectionManager.isAuthValid(),
                needsQR: !connectionManager.isAuthValid()
            });
        }

        // G√©n√©rer le code OTP
        const otp = generateOTP(otpLength || 6);
        
        // Formater le num√©ro
        const formattedNumber = formatPhoneNumber(phoneNumber);
        
        // V√©rifier si le num√©ro existe sur WhatsApp
        const [result] = await sock.onWhatsApp(formattedNumber.replace('@s.whatsapp.net', ''));
        if (!result.exists) {
            return res.status(404).json({
                success: false,
                error: 'Ce num√©ro n\'existe pas sur WhatsApp'
            });
        }

        // Pr√©parer le message
        const otpMessage = message 
            ? message.replace('{otp}', otp) 
            : `Votre code OTP est: *${otp}*\n\nCe code expire dans 10 minutes.`;

        // Envoyer le message
        const sentMessage = await sock.sendMessage(formattedNumber, {
            text: otpMessage
        });

        console.log(`üì§ OTP ${otp} envoy√© √† ${phoneNumber}`);

        res.json({
            success: true,
            message: 'Code OTP envoy√© avec succ√®s',
            data: {
                otp: otp, // En production, vous pourriez vouloir ne pas renvoyer l'OTP
                phoneNumber: phoneNumber,
                messageId: sentMessage.key.id,
                sessionId: connectionManager.getConnectionInfo().sessionId,
                timestamp: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'envoi de l\'OTP:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur interne du serveur',
            details: error.message
        });
    }
});

// Route pour envoyer un message personnalis√©
app.post('/send-message', async (req, res) => {
    try {
        const { phoneNumber, message } = req.body;

        if (!phoneNumber || !message) {
            return res.status(400).json({
                success: false,
                error: 'Le num√©ro de t√©l√©phone et le message sont requis'
            });
        }

        const isReallyConnected = await checkCurrentConnection();
        if (!isReallyConnected || !sock) {
            return res.status(503).json({
                success: false,
                error: 'WhatsApp n\'est pas connect√©'
            });
        }

        const formattedNumber = formatPhoneNumber(phoneNumber);
        
        // V√©rifier si le num√©ro existe
        const [result] = await sock.onWhatsApp(formattedNumber.replace('@s.whatsapp.net', ''));
        if (!result.exists) {
            return res.status(404).json({
                success: false,
                error: 'Ce num√©ro n\'existe pas sur WhatsApp'
            });
        }

        const sentMessage = await sock.sendMessage(formattedNumber, {
            text: message
        });

        res.json({
            success: true,
            message: 'Message envoy√© avec succ√®s',
            data: {
                phoneNumber: phoneNumber,
                messageId: sentMessage.key.id,
                sessionId: connectionManager.getConnectionInfo().sessionId,
                timestamp: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'envoi du message:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur interne du serveur',
            details: error.message
        });
    }
});

// Route pour visualiser le QR code
app.get('/qr-view', async (req, res) => {
    if (!qrString) {
        const connectionInfo = connectionManager.getConnectionInfo();
        return res.send(`
            <h2>QR code non disponible</h2>
            <p>√âtat de connexion: ${connectionInfo.isConnected ? 'Connect√©' : 'D√©connect√©'}</p>
            <p>Authentification valide: ${connectionInfo.hasValidAuth ? 'Oui' : 'Non'}</p>
            <button onclick="location.reload()">Rafra√Æchir</button>
        `);
    }
    
    const qrImageUrl = await QRCode.toDataURL(qrString);
    res.send(`
        <h2>Scannez ce QR code avec WhatsApp</h2>
        <img src="${qrImageUrl}" alt="QR Code" />
        <p>Ouvrez WhatsApp &gt; Appareils connect√©s &gt; Scanner un QR code</p>
        <button onclick="location.reload()">Rafra√Æchir</button>
    `);
});

// Route pour v√©rifier si un num√©ro existe sur WhatsApp
app.post('/check-number', asyncHandler(async (req, res) => {
    try {
        const { phoneNumber } = req.body;

        if (!phoneNumber) {
            return res.status(400).json({
                success: false,
                error: 'Le num√©ro de t√©l√©phone est requis'
            });
        }

        const isReallyConnected = await checkCurrentConnection();
        if (!isReallyConnected || !sock) {
            return res.status(503).json({
                success: false,
                error: 'WhatsApp n\'est pas connect√©'
            });
        }

        const cleanNumber = phoneNumber.replace(/[^\d+]/g, '');
        const numberToCheck = cleanNumber.startsWith('+') ? cleanNumber.substring(1) : cleanNumber;
        
        const [result] = await sock.onWhatsApp(numberToCheck);

        res.json({
            success: true,
            data: {
                phoneNumber: phoneNumber,
                exists: result.exists,
                jid: result.jid || null
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification du num√©ro:', error);
        res.status(500).json({
            success: false,
            error: 'Erreur interne du serveur',
            details: error.message
        });
    }
}));

// Route pour red√©marrer le service WhatsApp
app.post('/restart', async (req, res) => {
    try {
        const { clearAuth } = req.body;
        
        if (sock) {
            await sock.logout();
        }
        
        qrString = null;
        
        if (clearAuth) {
            // Supprimer les fichiers d'authentification
            if (fs.existsSync(AUTH_FOLDER)) {
                fs.rmSync(AUTH_FOLDER, { recursive: true, force: true });
            }
            connectionManager.clear();
        } else {
            connectionManager.setDisconnected();
        }
        
        setTimeout(connectToWhatsApp, 1000);
        
        res.json({
            success: true,
            message: `Service WhatsApp red√©marr√©${clearAuth ? ' (authentification effac√©e)' : ''}`,
            authCleared: !!clearAuth
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: 'Erreur lors du red√©marrage',
            details: error.message
        });
    }
});

// Route pour forcer une reconnexion
app.post('/reconnect', async (req, res) => {
    try {
        if (sock) {
            sock.end();
        }
        
        setTimeout(connectToWhatsApp, 1000);
        
        res.json({
            success: true,
            message: 'Reconnexion forc√©e'
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: 'Erreur lors de la reconnexion',
            details: error.message
        });
    }
});

// Middleware de gestion d'erreurs
app.use((err, req, res, next) => {
    console.error('API Error:', err);
    res.status(err.status || 500).json({
        success: false,
        error: err.message || 'Erreur interne du serveur',
        details: err.details || undefined
    });
});

// Route 404
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'Route non trouv√©e'
    });
});

// D√©marrage du serveur
app.listen(PORT, async () => {
    console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
    console.log(`üì± API disponible sur http://localhost:${PORT}`);
    
    // Afficher l'√©tat initial
    const connectionInfo = connectionManager.getConnectionInfo();
    console.log('üìä √âtat initial:', connectionInfo);
    
    console.log('\nüìã Routes disponibles:');
    console.log('  GET  /status - Statut d√©taill√© de la connexion');
    console.log('  GET  /auth-info - Informations d\'authentification');
    console.log('  GET  /qr - Obtenir le QR code');
    console.log('  GET  /qr-view - Visualiser le QR code');
    console.log('  POST /send-otp - Envoyer un code OTP');
    console.log('  POST /send-message - Envoyer un message');
    console.log('  POST /check-number - V√©rifier un num√©ro');
    console.log('  POST /restart - Red√©marrer le service');
    console.log('  POST /reconnect - Forcer une reconnexion\n');
});

// Initialiser la connexion WhatsApp au d√©marrage
connectToWhatsApp();

// V√©rification p√©riodique de la connexion (toutes les 30 secondes)
setInterval(async () => {
    if (sock && connectionManager.getConnectionInfo().isConnected) {
        const isStillConnected = await checkCurrentConnection();
        if (!isStillConnected) {
            console.log('‚ö†Ô∏è Connexion perdue d√©tect√©e, tentative de reconnexion...');
            connectionManager.setDisconnected();
            setTimeout(connectToWhatsApp, 2000);
        }
    }
}, 30000);

// G√©rer l'arr√™t propre du serveur
process.on('SIGINT', async () => {
    console.log('\nüõë Arr√™t du serveur...');
    if (sock) {
        await sock.logout();
    }
    connectionManager.setDisconnected();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('\nüõë Arr√™t du serveur (SIGTERM)...');
    if (sock) {
        await sock.logout();
    }
    connectionManager.setDisconnected();
    process.exit(0);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection:', reason);
    // Optionally notify admin, but do NOT exit process
});
process.on('uncaughtException', (err) => {
    console.error('Uncaught Exception:', err);
    // Optionally notify admin, but do NOT exit process
});